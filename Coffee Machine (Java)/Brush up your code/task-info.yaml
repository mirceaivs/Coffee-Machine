type: edu
files:
  - name: src/machine/CoffeeMachine.java
    visible: true
    text: |
      package machine;
      
      public class CoffeeMachine {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/CoffeeMachineTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.List;
      
      
      class TestClue {
          int water;
          int milk;
          int beans;
          int cups;
          int money;
          String feedback;
          TestClue(int w, int m, int b, int c, int mo, String feedback) {
              water = w;
              milk = m;
              beans = b;
              cups = c;
              money = mo;
              this.feedback = feedback;
          }
      }
      
      public class CoffeeMachineTest extends StageTest<TestClue> {
      
          @Override
          public List<TestCase<TestClue>> generate() {
              return List.of(
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          700 - 400,
                          390 - 540,
                          80 - 120 ,
                          7 - 9,
                          0 - 550,
                          "This test is exactly " +
                              "like in the example - try to run it by yourself"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "2\n" +
                              "buy\n" +
                              "2\n" +
                              "fill\n" +
                              "1000\n" +
                              "0\n" +
                              "0\n" +
                              "0\n" +
                              "buy\n" +
                              "2\n" +
                              "take\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          3000,
                          3000,
                          3000 ,
                          3000,
                          0,
                          "This test checks \"fill\" action"))
                      .setInput(
                          "remaining\n" +
                              "fill\n" +
                              "3000\n" +
                              "3000\n" +
                              "3000\n" +
                              "3000\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          -250,
                          0,
                          -16 ,
                          -1,
                          4, "This test checks \"buy\" " +
                          "action with the first variant of coffee"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "1\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          -350,
                          -75,
                          -20 ,
                          -1,
                          7, "This test checks \"buy\" " +
                          "action with the second variant of coffee"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "2\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          -200,
                          -100,
                          -12 ,
                          -1,
                          6, "This test checks \"buy\" " +
                          "action with the third variant of coffee"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "3\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          0,
                          0,
                          0 ,
                          0,
                          -550, "This test checks \"take\" action"))
                      .setInput(
                          "remaining\n" +
                              "take\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          0,
                          0,
                          0 ,
                          0,
                          0, "This test checks \"back\" " +
                          "action right after \"buy\" action"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "back\n" +
                              "remaining\n" +
                              "exit\n")
              );
          }
      
          @Override
          public CheckResult check(String reply, TestClue clue) {
              String[] lines = reply.split("\\n");
      
              if (lines.length <= 1) {
                  return CheckResult.wrong("Looks like you didn't print anything!");
              }
      
              int water_ = clue.water;
              int milk_ = clue.milk;
              int beans_ = clue.beans;
              int cups_ = clue.cups;
              int money_ = clue.money;
      
              List<Integer> milk = new ArrayList<>();
              List<Integer> water = new ArrayList<>();
              List<Integer> beans = new ArrayList<>();
              List<Integer> cups = new ArrayList<>();
              List<Integer> money = new ArrayList<>();
      
              for (String line : lines) {
                  line = line.replace("$", "").trim();
                  String[] words = line.split("\\s+");
                  if (words.length == 0) {
                      continue;
                  }
                  String firstWord = words[0];
                  int amount;
                  try {
                      amount = Integer.parseInt(firstWord);
                  }
                  catch (Exception e) {
                      continue;
                  }
                  if (line.contains("milk")) {
                      milk.add(amount);
                  }
                  else if (line.contains("water")) {
                      water.add(amount);
                  }
                  else if (line.contains("beans")) {
                      beans.add(amount);
                  }
                  else if (line.contains("cups")) {
                      cups.add(amount);
                  }
                  else if (line.contains("money")) {
                      money.add(amount);
                  }
              }
      
              if (milk.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"milk\", " +
                          "found: " + milk.size());
              }
      
              if (water.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"water\", " +
                          "found: " + water.size());
              }
      
              if (beans.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"beans\", " +
                          "found: " + beans.size());
              }
      
              if (cups.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"cups\", " +
                          "found: " + cups.size());
              }
      
              if (money.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"money\", " +
                          "found: " + money.size());
              }
      
              int milk0 = milk.get(0);
              int milk1 = milk.get(milk.size() - 1);
      
              int water0 = water.get(0);
              int water1 = water.get(water.size() - 1);
      
              int beans0 = beans.get(0);
              int beans1 = beans.get(beans.size() - 1);
      
              int cups0 = cups.get(0);
              int cups1 = cups.get(cups.size() - 1);
      
              int money0 = money.get(0);
              int money1 = money.get(money.size() - 1);
      
              int diffWater = water1 - water0;
              int diffMilk = milk1 - milk0;
              int diffBeans = beans1 - beans0;
              int diffCups = cups1 - cups0;
              int diffMoney = money1 - money0;
      
              boolean isCorrect =
                  diffWater == water_ &&
                      diffMilk == milk_ &&
                      diffBeans == beans_ &&
                      diffCups == cups_ &&
                      diffMoney == money_;
      
              return new CheckResult(isCorrect, clue.feedback);
          }
      }
    learner_created: false
  - name: src/machine/Latte.java
    visible: true
    text: |+
      package machine;
      
      public class Latte implements Coffee {
          final int WATER_ML_NEED = 350;
          final int MILK_ML_NEED = 75;
          final int COFFEE_BEANS_G_NEED = 20;
          final int COST = 7;
          @Override
          public void create() {
              int noCups = 1;
              boolean flag=true;
              for(int i=0; i<noCups; i++){
                  int waterForCoffees = CoffeeMachine.getWater() / WATER_ML_NEED;
                  int coffeeBeansForCoffees = CoffeeMachine.getCoffeeBeans() / COFFEE_BEANS_G_NEED;
                  int milkForCoffees = CoffeeMachine.getMilk() / MILK_ML_NEED;
      
                  if(waterForCoffees == 0){
                      System.out.println("Sorry, not enough water!");
                      flag=false;
                      break;
                  }
                  if(coffeeBeansForCoffees == 0){
                      System.out.println("Sorry, not enough coffee beans!");
                      flag=false;
                      break;
                  }
                  if(milkForCoffees == 0){
                      System.out.println("Sorry, not enough milk!");
                      flag=false;
                      break;
                  }
                  if(CoffeeMachine.getDisposableCups() == 0){
                      System.out.println("Sorry, not enough disposable cups!");
                      flag=false;
                      break;
                  }
                  int maxCups = Math.min(Math.min(Math.min(waterForCoffees, milkForCoffees), CoffeeMachine.getDisposableCups()), coffeeBeansForCoffees);
                  if(i <= maxCups)
                  {
                      CoffeeMachine.substract("water", WATER_ML_NEED);
                      CoffeeMachine.substract("coffeeBeans", COFFEE_BEANS_G_NEED);
                      CoffeeMachine.substract("disposableCups", noCups);
                      CoffeeMachine.substract("milk", MILK_ML_NEED);
                      CoffeeMachine.add("money", COST);
                  }
              }
              if(flag){
                  System.out.println("I have enough resources, making you a coffee!");
              }
          }
      }
    
    learner_created: true
  - name: src/machine/Espresso.java
    visible: true
    text: |+
      package machine;
      
      public class Espresso implements Coffee {
          final int WATER_ML_NEED = 250;
          final int COFFEE_BEANS_G_NEED = 16;
          final int COST = 4;
      
      
          @Override
          public void create() {
              int noCups = 1;
              boolean flag=true;
              for(int i=0; i<noCups; i++){
                  int waterForCoffees = CoffeeMachine.getWater() / WATER_ML_NEED;
                  int coffeeBeansForCoffees = CoffeeMachine.getCoffeeBeans() / COFFEE_BEANS_G_NEED;
      
                  if(waterForCoffees == 0){
                      System.out.println("Sorry, not enough water!");
                      flag=false;
                      break;
                  }
                  if(coffeeBeansForCoffees == 0){
                      System.out.println("Sorry, not enough coffee beans!");
                      flag=false;
                      break;
                  }
                  if(CoffeeMachine.getDisposableCups() == 0){
                      System.out.println("Sorry, not enough disposable cups!");
                      flag=false;
                      break;
                  }
                  int maxCups = Math.min(Math.min(waterForCoffees, CoffeeMachine.getDisposableCups()), coffeeBeansForCoffees);
                  if(i <= maxCups)
                  {
                      CoffeeMachine.substract("water", WATER_ML_NEED);
                      CoffeeMachine.substract("coffeeBeans", COFFEE_BEANS_G_NEED);
                      CoffeeMachine.substract("disposableCups", noCups);
                      CoffeeMachine.add("money", COST);
                  }
              }
              if(flag){
                  System.out.println("I have enough resources, making you a coffee!");
              }
      
          }
      }
    
    learner_created: true
  - name: src/machine/Coffee.java
    visible: true
    text: |+
      package machine;
      
      interface Coffee {
          void create();
      }
    
    learner_created: true
  - name: src/machine/Menu.java
    visible: true
    text: |
      package machine;
      import java.util.Scanner;
      
      interface iMenu{
          void exit();
          void buy();
          void take();
          void fill();
          void init();
          void remaining();
      
      }
      
      public class Menu implements iMenu {
      
          private static final Scanner scanner = new Scanner(System.in);
      
      
          @Override
          public void buy(){
              CoffeeFactory cafea = new CoffeeFactory();
              System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:");
              String choice = scanner.next();
              switch (choice){
                  case "1":
                      cafea.getCoffee("espresso").create();
                      init();
                      break;
                  case "2":
                      cafea.getCoffee("latte").create();
                      init();
                      break;
                  case "3":
                      cafea.getCoffee("cappuccino").create();
                      init();
                      break;
                  default:
                      init();
              }
          }
          @Override
          public void remaining(){
              System.out.println("\nThe coffee machine has:\n"
                      + CoffeeMachine.getWater() +" ml of water\n"
                      + CoffeeMachine.getMilk() +" ml of milk\n"
                      + CoffeeMachine.getCoffeeBeans() +" g of coffee beans\n"
                      + CoffeeMachine.getDisposableCups() +" disposable cups\n"
                      + "$"+CoffeeMachine.getMoney() +" of money"
              );
              init();
          }
          @Override
          public void init(){
              System.out.println("\nWrite action (buy, fill, take, remaining, exit):");
              String choice = scanner.next();
              switch(choice){
                  case "buy":
                      buy();
                      break;
                  case "fill":
                      fill();
                      break;
                  case "take":
                      take();
                      break;
                  case "exit":
                      exit();
                      break;
                  case "remaining":
                      remaining();
                      break;
                  default:
                      init();
              }
          }
          @Override
          public void exit(){
              System.exit(0);
          }
      
          @Override
          public void take(){
              System.out.println("I gave you $"+ CoffeeMachine.getMoney());
              CoffeeMachine.setMoney(0);
              init();
          }
          @Override
          public void fill(){
              System.out.println("Write how many ml of water you want to add:");
              int waterAdd = scanner.nextInt();
              CoffeeMachine.add("water", waterAdd);
              System.out.println("Write how many ml of milk you want to add:");
              int milkAdd = scanner.nextInt();
              CoffeeMachine.add("milk", milkAdd);
              System.out.println("Write how many grams of coffee beans you want to add:");
              int coffeeAdd = scanner.nextInt();
              CoffeeMachine.add("coffeeBeans", coffeeAdd);
              System.out.println("Write how many disposable cups you want to add:");
              int cupsAdd = scanner.nextInt();
              CoffeeMachine.add("disposableCups", cupsAdd);
              init();
          }
      }
    learner_created: true
  - name: src/machine/Cappuccino.java
    visible: true
    text: |
      package machine;
      
      public class Cappuccino implements Coffee {
          final int WATER_ML_NEED = 200;
          final int MILK_ML_NEED = 100;
          final int COFFEE_BEANS_G_NEED = 12;
          final int COST = 6;
      
          @Override
          public void create() {
              int noCups = 1;
              boolean flag=true;
              for (int i = 0; i < noCups; i++) {
                  int waterForCoffees = CoffeeMachine.getWater() / WATER_ML_NEED;
                  int coffeeBeansForCoffees = CoffeeMachine.getCoffeeBeans() / COFFEE_BEANS_G_NEED;
                  int milkForCoffees = CoffeeMachine.getMilk() / MILK_ML_NEED;
      
                  if(waterForCoffees == 0){
                      System.out.println("Sorry, not enough water!");
                      flag=false;
                      break;
                  }
                  if(coffeeBeansForCoffees == 0){
                      System.out.println("Sorry, not enough coffee beans!");
                      flag=false;
                      break;
                  }
                  if(milkForCoffees == 0){
                      System.out.println("Sorry, not enough milk!");
                      flag=false;
                      break;
                  }
                  if(CoffeeMachine.getDisposableCups() == 0){
                      System.out.println("Sorry, not enough disposable cups!");
                      flag=false;
                      break;
                  }
                  int maxCups = Math.min(Math.min(Math.min(waterForCoffees, milkForCoffees), CoffeeMachine.getDisposableCups()), coffeeBeansForCoffees);
                  if (i <= maxCups) {
                      CoffeeMachine.substract("water", WATER_ML_NEED);
                      CoffeeMachine.substract("coffeeBeans", COFFEE_BEANS_G_NEED);
                      CoffeeMachine.substract("disposableCups", noCups);
                      CoffeeMachine.substract("milk", MILK_ML_NEED);
                      CoffeeMachine.add("money", COST);
                  }
              }
              if(flag){
                  System.out.println("I have enough resources, making you a coffee!");
              }
      
          }
      }
    learner_created: true
  - name: src/machine/CoffeeFactory.java
    visible: true
    text: |
      package machine;
      
      public class CoffeeFactory {
              public Coffee getCoffee(String coffeeType){
                  switch (coffeeType){
                      case "espresso":
                          return new Espresso();
                      case "latte":
                          return new Latte();
                      case "cappuccino":
                          return new Cappuccino();
                      default:
                          return null;
                  }
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5334#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Thu, 16 Nov 2023 00:02:53 UTC"
record: -1
